class is SpriteSceneWithEntities imports cape imports cave imports motion imports capex:

var background as SpriteEntity
var square as SpriteEntity
var triangle as SpriteEntity
var quit as SpriteEntity
var height as double
var showScore as TextSprite
var width as double
var time as double
var rand = new Random()
var score as int
var audioManager as AudioManager
var stream as AudioStream

func initialize override
{
	base.initialize()
	height  = getReferenceHeight()
	width = getReferenceWidth()
	addEntity(background = new BackgroundEntity())
	var textProp = TextProperties.forText("Counter")
	textProp.setTextColor(Color.black())
	textProp.setFontSizeRelative(0.75 * height)
	textProp.setFontFamily("Times new roman")
	textProp.setFontIsBold(true)
	showScore = addTextSprite(textProp)
	showScore.move(0.0, height - showScore.getHeight())
	audioManager = AudioManager.forApplication(getContext())
	if(audioManager != null){
		stream = audioManager.getStreamForResource("music")
	}
	onTimeToPlayStream()
	addEntity(square = new SquareEntity())
	addEntity(quit = new QuitButtonEntity())
}

func getSquare as SpriteEntity
{
	return square
}
func tick(gameTime as TimeValue, delta as double) override
{
	var spawner = rand.nextInt(1,2)
	base.tick(gameTime, delta)
	time++
	if(time % 40 == 0){
		score++
	}
	showScore.setText(String.append("Counter: ", score))
	if(time % 100 == 0){
		if(spawner == 1){
			addEntity(triangle = new TriangleEntity())
		}
	}
	if(time % 105 == 0){
		if(spawner == 2){
			addEntity(triangle = new TriangleEntity())
		}
	}
}

func getScore as int
{
	return score
}

func getContext as ApplicationContext
{
	return context
}

func onTimeToPlayStream
{
	if(stream != null){
		stream.play()
		stream.setLooping(true)
	}
}

func stopStream
{
	if(stream != null){
		stream.stop()
	}
}

func removeTriangleSprite
{
	if(triangle.getX() <= -width){
		removeSprite(triangle)
	}
}

func cleanup override
{
	stopStream()
	removeEntity(background)
	removeEntity(square)
	removeEntity(triangle)
	removeEntity(quit)
}
